/* Versão Inicial site: http://www.robocore.net
 * Modificado dia 04 de Junho de 2018
 * Por: Jonathan Fernandes Gobato
 * Modificações: Adição do sensor ultrassônico
*/

#include <SPI.h>         // Biblioteca para comunicação
#include <NewPing.h>     // Biblioteca para sensor ultrassonico
#include <Ethernet.h>    // Biblioteca para utilização do Shield Ethernet

//Configuração do sensor Ultrassonico -> Inicio
#define TRIGGER_PIN  8  // Arduino pin tied to trigger pin on the ultrasonic sensor.
#define ECHO_PIN     7  // Arduino pin tied to echo pin on the ultrasonic sensor.
#define MAX_DISTANCE 200 // Maximum distance we want to ping for (in centimeters). Maximum sensor distance is rated at 400-500cm.

NewPing sonar(TRIGGER_PIN, ECHO_PIN, MAX_DISTANCE); // NewPing setup of pins and maximum distance.
//Configuração do sensor Ultrassonico -> Final

//Configuração do Shield de Ethernet -> Inicio
byte mac[] =     { 0x90, 0xA2, 0xDA, 0x0F, 0x09, 0xA7 }; // mac address (endereço fisico).
byte ip[] =      { 192, 168, 137, 232 };                  // ip para montar a Lan.
//192.168.137.232
byte gateway[] = { 192, 168, 137, 1 };                  // URL para ser acessado pelo navegador.
byte subnet[] =  { 255, 255, 255, 0 };                   // Mascara de subrede (default) -> acesso de uma rede caseira.
EthernetServer server(80); //Porta de acesso (configuração padrão windows -> Porta 80)
//Configuração do Shield de Ethernet -> Final

String readString;
int pinI = 9;                // Acionamento do RELE
int pinL = 6;                // Acionamento do LED de proximidade
boolean ligado = true;       // Controle para o Ethernet

//////////////////////

void setup(){

  //Configuração do Ethernet -> Inicio
  pinMode(pinI, OUTPUT); //pin selected to control
  //start Ethernet
  Ethernet.begin(mac, ip, gateway, subnet);
  server.begin();
  Serial.begin(9600); //enable serial data print
  Serial.println("Sistema monitoramento de energia");
  Serial.println(Ethernet.localIP());
  //Configuração do Ethernet -> Final
}

void loop(){
  // Create a client connection
  EthernetClient client = server.available();
  if (client) {
    while (client.connected()) {
      if (client.available()) {
        char c = client.read();
        //read char by char HTTP request
        if (readString.length() < 100) {

          //store characters to string
          readString += c;
          //Serial.print(c);
        }

        //if HTTP request has ended
        if (c == '\n') {
          ///////////////////// control arduino pin
          Serial.println(readString); //print to serial monitor for debuging
          if(readString.indexOf("?ligar") >0)//checks for on
          {
            digitalWrite(pinL, HIGH);    // set pin 6 high
            Serial.println("On");
            ligado = false;
          }
          else{
            if(readString.indexOf("?desligar") >0)//checks for off
            {
              digitalWrite(pinI, LOW);    // set pin 4 low
              Serial.println("Off");
              ligado = true;
            }
          }
          //clearing string for next read
          readString="";
          ///////////////
          client.println("HTTP/1.1 200 OK"); //send new page
          client.println("Content-Type: text/html");
          client.println();
          // Começa a montar o "site" em HTML
          client.println("<html>");
          client.println("<head>");
          client.println("<title>RoboCore - Remote Automation</title>");
          client.println("<meta http-equiv='Content-Type' content='text/html; charset=ISO-8859-1'>");
          client.println("<link rel='stylesheet' type='text/css' href='http://www.robocore.net/upload/projetos/RemoteAutomationV1.0.css' />");
          client.println("<script type='text/javascript' src='http://www.robocore.net/upload/projetos/RemoteAutomationV1.0.js'></script>");
          client.println("</head>");
          client.println("<body>");
          client.println("<div id='wrapper'>Sistema de monitoramento de energia :D");
          client.print("<div id='rele'></div><div id='estado' style='visibility: hidden;'>");
          client.print(ligado);
          client.println("</div>");
          client.println("<div id='botao'></div>");
          client.println("</div>");
          client.println("<script>AlteraEstadoRele()</script>");
          client.println("</body>");
          client.println("</head>");
          delay(1);         // Tempo de espera
          //stopping client
          client.stop();    // Encerra a conexão
        }
      }
    }
  }
  delay(1000);                     // Wait 50ms between pings (about 20 pings/sec). 29ms should be the shortest delay between pings.
  if(ligado){
    Serial.print("Ping: ");
  Serial.print(sonar.ping_cm()); // Send ping, get distance in cm and print result (0 = outside set distance range)
  Serial.println("cm");
  if(sonar.ping_cm() < 10){
    Serial.println("Ligado");
    digitalWrite(pinL, HIGH);
    delay(1000);
  }else{
    Serial.println("Desligado");
    digitalWrite(pinL, LOW);
    delay(1000);
  }
  }
}
